# Kestra Image Configuration
image:
  image: kestra/kestra
  tag: latest
  pullPolicy: IfNotPresent
# Configuration for Kestra Deployment
# The following sections can be used to set up the Kestra configuration

# This creates a config map of the Kestra configuration
configuration: {}
# This will create a Kubernetes Secret for the values provided
# This will be appended to kestra-secret with the key application-secrets.yml
secrets: {}
# Kestra Deployments
deployments:
  # By default, standalone is enabled with all components in one pod
  standalone:
    enabled: true
    kind: Deployment
    command: "server standalone"
    terminationGracePeriodSeconds: 60
  # Individual components (disabled by default for standalone mode)
  webserver:
    enabled: false
  executor:
    enabled: false
  indexer:
    enabled: false
  scheduler:
    enabled: false
  worker:
    enabled: false
# Docker in Docker (DinD) for Script Tasks
dind:
  enabled: true
  image:
    image: docker
    tag: dind-rootless
    pullPolicy: IfNotPresent
  socketPath: /dind/
  tmpPath: /tmp/
  resources: {}
  args:
    - --log-level=fatal
    - --group=1000
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
# PostgreSQL configuration (enabled by default)
postgresql:
  enabled: true
  auth:
    database: kestra
    username: kestra
    password: kestra
  primary:
    persistence:
      enabled: true
      size: 8Gi
# MinIO configuration (enabled by default for internal storage)
minio:
  enabled: true
  auth:
    rootUser: kestra
    rootPassword: kestra-secret
  defaultBuckets: kestra
  resources:
    requests:
      memory: 512Mi
# Elasticsearch configuration (optional but recommended)
elasticsearch:
  enabled: true
  clusterName: "es-kestra"
  createCert: false
  protocol: http
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
# Kafka configuration (disabled by default)
kafka:
  enabled: false
# Service configuration
service:
  type: ClusterIP
  port: 8080
# Disable ingress since we're using HTTPRoute for external access
ingress:
  enabled: false
# Resource configuration for better performance
resources:
  requests:
    memory: 512Mi
    cpu: 500m
  limits:
    memory: 1Gi
    cpu: 1000m
# Security context
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
# Health checks
readinessProbe:
  enabled: true
  path: /health
  port: management
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
  httpGetEnabled: true
livenessProbe:
  enabled: true
  path: /health
  port: management
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
  httpGetEnabled: true
startupProbe:
  enabled: true
  path: /health
  port: management
  initialDelaySeconds: 1
  periodSeconds: 1
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 120
  httpGetEnabled: true
